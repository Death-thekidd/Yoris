{"ast":null,"code":"import normalizeColor from \"../StyleSheet/normalizeColor\";\nimport View from \"../Components/View/View\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function PressabilityDebugView(_ref) {\n  var color = _ref.color,\n      hitSlop = _ref.hitSlop;\n\n  if (__DEV__) {\n    if (isEnabled()) {\n      var _hitSlop$bottom, _hitSlop$left, _hitSlop$right, _hitSlop$top;\n\n      var normalizedColor = normalizeColor(color);\n\n      if (typeof normalizedColor !== 'number') {\n        return null;\n      }\n\n      var baseColor = '#' + (normalizedColor != null ? normalizedColor : 0).toString(16).padStart(8, '0');\n      return _jsx(View, {\n        pointerEvents: \"none\",\n        style: {\n          backgroundColor: baseColor.slice(0, -2) + '0F',\n          borderColor: baseColor.slice(0, -2) + '55',\n          borderStyle: 'dashed',\n          borderWidth: 1,\n          bottom: -((_hitSlop$bottom = hitSlop == null ? void 0 : hitSlop.bottom) != null ? _hitSlop$bottom : 0),\n          left: -((_hitSlop$left = hitSlop == null ? void 0 : hitSlop.left) != null ? _hitSlop$left : 0),\n          position: 'absolute',\n          right: -((_hitSlop$right = hitSlop == null ? void 0 : hitSlop.right) != null ? _hitSlop$right : 0),\n          top: -((_hitSlop$top = hitSlop == null ? void 0 : hitSlop.top) != null ? _hitSlop$top : 0)\n        }\n      });\n    }\n  }\n\n  return null;\n}\nvar isDebugEnabled = false;\nexport function isEnabled() {\n  if (__DEV__) {\n    return isDebugEnabled;\n  }\n\n  return false;\n}\nexport function setEnabled(value) {\n  if (__DEV__) {\n    isDebugEnabled = value;\n  }\n}","map":{"version":3,"names":["normalizeColor","View","React","PressabilityDebugView","color","hitSlop","__DEV__","isEnabled","normalizedColor","baseColor","toString","padStart","backgroundColor","slice","borderColor","borderStyle","borderWidth","bottom","left","position","right","top","isDebugEnabled","setEnabled","value"],"sources":["C:/Users/USER/Desktop/Yoris/node_modules/react-native/Libraries/Pressability/PressabilityDebug.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport normalizeColor from '../StyleSheet/normalizeColor';\nimport type {ColorValue} from '../StyleSheet/StyleSheet';\n\nimport View from '../Components/View/View';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  color: ColorValue,\n  hitSlop: ?$ReadOnly<{|\n    bottom?: ?number,\n    left?: ?number,\n    right?: ?number,\n    top?: ?number,\n  |}>,\n|}>;\n\n/**\n * Displays a debug overlay to visualize press targets when enabled via the\n * React Native Inspector. Calls to this module should be guarded by `__DEV__`,\n * for example:\n *\n *   return (\n *     <View>\n *       {children}\n *       {__DEV__ ? (\n *         <PressabilityDebugView color=\"...\" hitSlop={props.hitSlop} />\n *       ) : null}\n *     </View>\n *   );\n *\n */\nexport function PressabilityDebugView({color, hitSlop}: Props): React.Node {\n  if (__DEV__) {\n    if (isEnabled()) {\n      const normalizedColor = normalizeColor(color);\n      if (typeof normalizedColor !== 'number') {\n        return null;\n      }\n      const baseColor =\n        '#' + (normalizedColor ?? 0).toString(16).padStart(8, '0');\n\n      return (\n        <View\n          pointerEvents=\"none\"\n          style={\n            // eslint-disable-next-line react-native/no-inline-styles\n            {\n              backgroundColor: baseColor.slice(0, -2) + '0F', // 15%\n              borderColor: baseColor.slice(0, -2) + '55', // 85%\n              borderStyle: 'dashed',\n              borderWidth: 1,\n              bottom: -(hitSlop?.bottom ?? 0),\n              left: -(hitSlop?.left ?? 0),\n              position: 'absolute',\n              right: -(hitSlop?.right ?? 0),\n              top: -(hitSlop?.top ?? 0),\n            }\n          }\n        />\n      );\n    }\n  }\n  return null;\n}\n\nlet isDebugEnabled = false;\n\nexport function isEnabled(): boolean {\n  if (__DEV__) {\n    return isDebugEnabled;\n  }\n  return false;\n}\n\nexport function setEnabled(value: boolean): void {\n  if (__DEV__) {\n    isDebugEnabled = value;\n  }\n}\n"],"mappings":"AAUA,OAAOA,cAAP;AAGA,OAAOC,IAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AA2BA,OAAO,SAASC,qBAAT,OAAoE;EAAA,IAApCC,KAAoC,QAApCA,KAAoC;EAAA,IAA7BC,OAA6B,QAA7BA,OAA6B;;EACzE,IAAIC,OAAJ,EAAa;IACX,IAAIC,SAAS,EAAb,EAAiB;MAAA;;MACf,IAAMC,eAAe,GAAGR,cAAc,CAACI,KAAD,CAAtC;;MACA,IAAI,OAAOI,eAAP,KAA2B,QAA/B,EAAyC;QACvC,OAAO,IAAP;MACD;;MACD,IAAMC,SAAS,GACb,MAAM,CAACD,eAAD,WAACA,eAAD,GAAoB,CAApB,EAAuBE,QAAvB,CAAgC,EAAhC,EAAoCC,QAApC,CAA6C,CAA7C,EAAgD,GAAhD,CADR;MAGA,OACE,KAAC,IAAD;QACE,aAAa,EAAC,MADhB;QAEE,KAAK,EAEH;UACEC,eAAe,EAAEH,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,IAAyB,IAD5C;UAEEC,WAAW,EAAEL,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,IAAyB,IAFxC;UAGEE,WAAW,EAAE,QAHf;UAIEC,WAAW,EAAE,CAJf;UAKEC,MAAM,EAAE,qBAAEZ,OAAF,oBAAEA,OAAO,CAAEY,MAAX,8BAAqB,CAArB,CALV;UAMEC,IAAI,EAAE,mBAAEb,OAAF,oBAAEA,OAAO,CAAEa,IAAX,4BAAmB,CAAnB,CANR;UAOEC,QAAQ,EAAE,UAPZ;UAQEC,KAAK,EAAE,oBAAEf,OAAF,oBAAEA,OAAO,CAAEe,KAAX,6BAAoB,CAApB,CART;UASEC,GAAG,EAAE,kBAAEhB,OAAF,oBAAEA,OAAO,CAAEgB,GAAX,2BAAkB,CAAlB;QATP;MAJJ,EADF;IAmBD;EACF;;EACD,OAAO,IAAP;AACD;AAED,IAAIC,cAAc,GAAG,KAArB;AAEA,OAAO,SAASf,SAAT,GAA8B;EACnC,IAAID,OAAJ,EAAa;IACX,OAAOgB,cAAP;EACD;;EACD,OAAO,KAAP;AACD;AAED,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA0C;EAC/C,IAAIlB,OAAJ,EAAa;IACXgB,cAAc,GAAGE,KAAjB;EACD;AACF"},"metadata":{},"sourceType":"module"}